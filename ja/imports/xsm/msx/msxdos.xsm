// system reset
const BDOS = 0x0005;
const DTA = 0x0080;

const FCB1 = 0x5c;  // パラメータ１
const FCB2 = 0x6c;  // パラメータ２

struct FCB_CPM {
    byte     drive;              // ドライブ番号 ファイルの存在するディスクドライブを示します(0=デフォルトドライブ、1=A、2=B...7=H)。
    char[8]  name;               // ファイル名 8文字に満たないお分はスペース(20H)で埋めます。
    char[3]  ext;                // 拡張子     3文字に満たないお分はスペース(20H)で埋めます。
    byte     currentBlock;       // カレントブロック シーケンシャルアクセスの際、参照中のブロック番号を示します(0x14、0x15参照)
    byte     filler1;            // システムで使用
    byte     recordSize;         // ブロック中のレコード数が設定されます(0x14、0x15参照)
    byte     filler2;            // システムで使用
    byte[4]  fileSize;           // ファイルサイズ
    word     date;               // 日付
    word     time;               // 時刻
    byte     deviceId;           // デバイスID 周辺装置・ディスクファイルの区別が設定されます。
    byte     directoryLocation;  // ディレクトリロケーション 何番めのディレクトリエントリに骸当するファイルであるかが設定されます。
    word     startCluster;       // 先頭クラスタ
    word     endCluster;         // 終了クラスタ
    word     position;           // 相対位置  最後にアクセスされたクラスタの先頭クラスタからのファイル内での相対位置が番号で設定されます。
    byte     currentRecord;      // カレントレコード シーケンシャルアクセスの際、参照中のレコード番号を示します(0x14、0x15参照)
    byte[3]  randomRecord;       // ランダムレコード アクセスしたいレコードを指定します(0x21、0x22、0x28参照)。
}

struct FCB {
    byte     drive;              // ドライブ番号 ファイルの存在するディスクドライブを示します(0=デフォルトドライブ、1=A、2=B...7=H)。
    char[8]  name;               // ファイル名 8文字に満たないお分はスペース(20H)で埋めます。
    char[3]  ext;                // 拡張子     3文字に満たないお分はスペース(20H)で埋めます。
    byte     filler1;            // システムで使用
    byte     filler2;            // システムで使用
    word     recordSize;         // レコードサイズ(0x26、0x27参照)
    byte[4]  fileSize;           // ファイルサイズ
    word     date;               // 日付
    word     time;               // 時刻
    byte     deviceId;           // デバイスID 周辺装置・ディスクファイルの区別が設定されます。
    byte     directoryLocation;  // ディレクトリロケーション 何番めのディレクトリエントリに骸当するファイルであるかが設定されます。
    word     startCluster;       // 先頭クラスタ
    word     endCluster;         // 終了クラスタ
    word     position;           // 相対位置  最後にアクセスされたクラスタの先頭クラスタからのファイル内での相対位置が番号で設定されます。
    byte     filler3;            // システムで使用
    byte[4]  randomRecord;       // ランダムレコード アクセスしたいレコードを指定します(0x21、0x22、0x28参照)。
}

// _BUFINの行バッファ(サンプル)
struct LINE_BUF {
    byte max;           // 最大サイズ bufferのサイズをセットすること
    byte size;          // 入力された文字列のサイズ
    char[41]  buffer;   // バッファ、用途に合わせて定義しなおす (40文字+'\0'用)
}

/**
 * システムリセット
 */
function(BDOS) _TERM0(c = 0x00);

/**
 * コンソール入力
 * @return a コンソールから入力した1文字
 */ 
function(BDOS) _CONIN(c = 0x01): a;

/**
 * コンソール出力
 * @param e 出力する文字コード
 */
function(BDOS) _CONOUT(e, c = 0x02);

/**
 * 補助入力
 * @return a 補助入力から入力した1文字
 */ 
function(BDOS) _AUXIN(c = 0x03): a;

/**
 * 補助出力
 * @param e 補助入力へ出力する文字コード
 */
function(BDOS) _AUXOUT(e, c = 0x04);

/**
 * プリンタ出力
 * @param e 出力する文字コード
 */
function(BDOS) _LSTOUT(e, c = 0x05);

/**
 * 直接コンソール入出力(エコーバックなし)
 * @param e 0xFF - 入力、 0xFF以外 - セットされた値を文字コードとみなしてコンソールに出力
 * @return a コンソールから入力した1文字、コンソール入力がないときは0
 */ 
function(BDOS) _DIRIO(e, c = 0x06): a;

/**
 * 直接コンソール入力(エコーバックなし)
 * @return a コンソールから入力した1文字
 * @remark CP/M非互換 
 */ 
function(BDOS) _DIRIN(c = 0x07): a;

/**
 * コンソール入力(エコーバックなし)
 * @return a コンソールから入力した1文字
 * @remark CP/M非互換
 */ 
function(BDOS) _INNOE(c = 0x08): a;

/**
 * 文字列出力
 * @param de コンソールに出力する文字列があるメモリの先頭アドレス
 */ 
function(BDOS) _STROUT(de, c = 0x09);

/**
 * 文字列入力
 * @param de 行バッファの先頭アドレス(LINE_BUF構造体)
 *           de + 0 最大文字数
 *           de + 1 実際に入力された文字数
 *           de + 2 入力された文字列
 */ 
function(BDOS) _BUFIN(de, c = 0x0a);

/**
 * コンソール入力状態のチェック
 * @return a 0xFF - コンソール入力がある 0x00 - コンソール入力がない
 */ 
function(BDOS) _CONST(c = 0x0b): a;

/**
 * バージョン番号の獲得
 * @return hl MSX-DOSでは必ず0x0022が戻る。
 */ 
function(BDOS) _CPMVER(c = 0x0c): hl;

/**
 * ディスクリセット
 */ 
function(BDOS) _DSKRST(c = 0x0d);

/**
 * デフォルトドライブの設定
 * @param e デフォルトドライブ番号(A=0,B=1,H=7)
 */ 
function(BDOS) _SELDSK(e, c = 0x0e);

/**
 * ファイルのオープン
 * @param de オープンされていないFCBの先頭アドレス
 *           FCBのカレントブロック 読み出すブロック番号
 * @return A 0x00 - オープン成功 0xff - オープン失敗
 */ 
function(BDOS) _FOPEN(de, c = 0x0f): a;

/**
 * ファイルのクローズ
 * @param de オープンされたFCBの先頭アドレス
 * @return a 0x00 - クローズ成功 0xff - クローズ失敗
 */ 
function(BDOS) _FCLOSE(de, c = 0x10): a;

/**
 * ファイルの検索(最初の一致)
 * @param de オープンされていないFCBの先頭アドレス
 * @return a 0x00 - クローズ成功 0xff - クローズ失敗
 */ 
function(BDOS) _SFIRST(de, c = 0x11): a;

/**
 * ファイルの検索(後続の一致)
 * @return a 0x00 - クローズ成功 0xff - クローズ失敗
 */ 
function(BDOS) _SNEXT(c = 0x12): a;

/**
 * ファイルの削除
 * @param de オープンされていないFCBの先頭アドレス
 * @return a 0x00 - 成功 0xff - 失敗
 */ 
function(BDOS) _FDEL(de, c = 0x13): a;

/**
 * シーケンシャルな読み出し
 * @param de オープンされたFCBの先頭アドレス
 * @return a 0x00 - 成功 0xff - 失敗
 * DTA + 128 読み出しが成功したときは、DTA以降の128バイトに読み込んだレコードをセットします。
 */ 
function(BDOS) _RDSEQ(de, c = 0x14): a;

/**
 * シーケンシャルな書き込み
 * @param de オープンされたFCBの先頭アドレス
 * FCB.currentRecord   書き込むレコード番号
 * DTA + 128           書き込むデータ
 * @return a 0x00 - 成功 0xff - 失敗
 */ 
function(BDOS) _WRSEQ(de, c = 0x15): a;

/**
 * ファイルの作成
 * @param de オープンされていないFCBの先頭アドレス
 * FCB.currentBlock   読み出すプロック番号
 * @return a 0x00 - 成功 0xff - 失敗
 */ 
function(BDOS) _FMAKE(de, c = 0x16): a;

/**
 * ファイル名の変更
 * @param de オープンされていないFCBの先頭アドレス
 * FCB + 0   旧ファイル名
 * FCB + 16  新ファイル名
 * @return a 0x00 - 成功 0xff - 失敗
 */ 
function(BDOS) _FREN(de, c = 0x17): a;

/**
 * ログインベクトルの獲得
 * @return HL オンラインドライブ情報
 */ 
function(BDOS) _LOGIN(c = 0x18): hl;

/**
 * デフォルトドライブ番号の獲得
 * @return a デフォルトドライブ番号(A=0,B=1,H=7)
 */ 
function(BDOS) _CURDRV(c = 0x19): a;

/**
 * 転送先アドレス(DTA) の設定
 * @param de 設定するDTAアドレス
 */ 
function(BDOS) _SETDTA(de, c = 0x1a);

/**
 * ディスク情報の獲得
 * @param e 設定するDTAアドレス
 * @return a  - 1クラスタあたりの論理セクタ数 FFH 指定ドライブがオフライン
 *         bc - セクタのサイズ(バイト単位)
 *         de - クラスタの総数
 *         hl - 未使用クラスタの総数
 *         ix - DPBの先頭アドレス
 *         iy - FATバッファの先頭アドレス
 */ 
function(BDOS) _ALLOC(e, c = 0x1b);

/**
 * ランダムな読み出し
 * @param de オープンされたFCBの先頭アドレス
 * FCB.randomRecord 読み出すレコード番号
 * @return a 0x00 - 成功 0xff - 失敗
 * DTA + 128 読み出しが成功したときは、DTA以降の128バイトに読み込んだレコードをセットします。
 */ 
function(BDOS) _RDRND(de, c = 0x21): a;

/**
 * ランダムな書き込み
 * @param de オープンされたFCBの先頭アドレス
 * FCB.randomRecord 書き込むレコード番号
 * DTA + 128        書き込むデータ
 * @return a 0x00 - 成功 0xff - 失敗
 */ 
function(BDOS) _WRRND(de, c = 0x22): a;

/**
 * ファイルサイズの獲得
 * @param de オープンされたFCBの先頭アドレス
 * @return a 0x00 - 成功 0xff - 失敗
 * 獲得が成功すれば、FCBのランダムレコードフィールドに指定されたファイルの128バイト単位のサイズをセットします。
 */ 
function(BDOS) _FSIZE(de, c = 0x23): a;

/**
 * ランダムレコードフィールドの設定
 * @param de オープンされたFCBの先頭アドレス
 * FCB.currentBlock  目的のブロック
 * FCB.currentRecord 目的のレコード
 * @return
 * ランダムレコードフィールドに指定されたFCBのカレントブロックフィールドと
 * カレントレコードフィールドから計算したカレントレコードポジションを設定します。
 */ 
function(BDOS) _SETRND(de, c = 0x24);

/**
 * ランダムブロック書き込み
 * @param de オープンされたFCBの先頭アドレス
 * FCB.recordSize    書き込むレコードサイズ
 * FCB.randomRecord  書き込みを開始するレコード
 * @param hl 書き込むレコード数
 * DTA以降のメモリ領域 書き込むデータ
 * @return a 0x00 - 成功 0xff - 失敗
 */ 
function(BDOS) _WRBLK(de, c = 0x26): a;

/**
 * ランダムブロック読みだし
 * @param de オープンされたFCBの先頭アドレス
 * FCB.recordSize    読み出すレコードサイズ
 * FCB.randomRecord  読み出しを開始するレコード
 * @param hl 読み出すレコード数
 * @return a 0x00 - 成功 0xff - 失敗
 *         hl 実際に読み込んだレコードの個数
 */ 
function(BDOS) _RDBLK(de, c = 0x27): a;

/**
 * 「0」の書き込みをともなうランダムな書き込み
 * @param de オープンされたFCBの先頭アドレス
 * FCB.randomRecord 書き込むレコード番号
 * DTA + 128 書き込むデータ
 * @return a 0x00 - 成功 0xff - 失敗
 */ 
function(BDOS) _WRZER(de, c = 0x28): a;

/**
 * 日付の獲得
 * @return a  曜日(0=日曜...6=土曜)
 *         hl 年(1980-2079)
 *         d  月(1～12)
 *         e  月(1～31)
 */ 
function(BDOS) _GDATE(c = 0x2a);

/**
 * 日付の設定
 * @param  hl 年(1980-2079)
 * @param  d  月(1～12)
 * @param  e  月(1～31)
 * @return a 0x00 - 成功 0xff - 失敗
 */ 
function(BDOS) _SDATE(hl,d,e,c = 0x2b): a;

/**
 * 時刻の獲得
 * @return h 時
 *         l 分
 *         d 秒
 *         e 1/100秒
 */ 
function(BDOS) _GTIME(c = 0x2c);

/**
 * 時刻の設定
 * @param  h 時
 * @param  l 分
 * @param  d 秒
 * @return a 0x00 - 成功 0xff - 失敗
 */ 
function(BDOS) _STIME(h,l,d,c = 0x2d);

/**
 * ベリファイフラグの設定
 * @param  e 0x00 - ベリファイフラグをリセット 0x01 - ベリファイフラグをセット
 */ 
function(BDOS) _VERIFY(e, c = 0x2e);

/**
 * 論理セクタの読み出し
 * @param  de 読み出す論理セクタの番号(複数のときはその先頭の論理セクタ番号)
 * @param  h  読み出す論理セクタの個数
 * @param  l  読み出すディスクのドライブ番号(A=0,B=1,H=7)
 * @return
 *         DTA以降の(論理セクタサイズ×論理セクタの個数)バイトに読み込んだ内容を設定
 */ 
function(BDOS) _RDABS(c = 0x2f);

/**
 * 論理セクタの書き込み
 * @param  de 書き込む論理セクタの番号(複数のときはその先頭の論理セクタ番号)
 * @param  h  書き込む論理セクタの個数
 * @param  l  書き込むディスクのドライブ番号(A=0,B=1,H=7)
 */ 
function(BDOS) _WRABS(c = 0x30);
